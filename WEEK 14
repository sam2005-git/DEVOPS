Selenium Testing
1. Install Selenium and WebDriver
Install Selenium Library:
bash
Copy code
pip install selenium
Download WebDriver:
Download the WebDriver that matches your browser version. Common drivers:
Chrome: ChromeDriver
Firefox: GeckoDriver
Edge: Edge WebDriver
Set Path:
Ensure the WebDriver executable is in your system PATH or specify the path in your code.
2. Basic Test Setup
Import Selenium’s WebDriver and start a browser session.
Example: Opening a browser and navigating to a webpage.
python
Copy code
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import time

# Initialize WebDriver
driver = webdriver.Chrome()  # or `webdriver.Firefox()`, etc.
driver.get("https://example.com")

# Wait and close
time.sleep(5)
driver.quit()
3. Locating Web Elements
Selenium provides several methods for finding elements on a page:

Find Element by ID:
python
Copy code
element = driver.find_element(By.ID, "element_id")
Find Element by Name:
python
Copy code
element = driver.find_element(By.NAME, "element_name")
Find Element by Class Name:
python
Copy code
element = driver.find_element(By.CLASS_NAME, "element_class")
Find Element by Tag Name:
python
Copy code
element = driver.find_element(By.TAG_NAME, "tag_name")
Find Element by CSS Selector:
python
Copy code
element = driver.find_element(By.CSS_SELECTOR, "css_selector")
Find Element by XPath:
python
Copy code
element = driver.find_element(By.XPATH, "xpath_expression")
4. Interacting with Elements
Clicking an Element:
python
Copy code
element.click()
Sending Keys (Typing Text):
python
Copy code
element.send_keys("Text to type")
Submitting a Form:
python
Copy code
element.submit()
5. Waiting for Elements (Explicit and Implicit Waits)
Implicit Wait: Sets a wait time for the entire session.
python
Copy code
driver.implicitly_wait(10)  # Wait up to 10 seconds
Explicit Wait: Waits until a specific condition is met.
python
Copy code
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

element = WebDriverWait(driver, 10).until(
    EC.presence_of_element_located((By.ID, "element_id"))
)
6. Handling Pop-ups and Alerts
Switching to an Alert:
python
Copy code
alert = driver.switch_to.alert
alert.accept()  # To accept
alert.dismiss()  # To dismiss
7. Taking Screenshots
python
Copy code
driver.save_screenshot("screenshot.png")
8. Assertions in Selenium Testing
Use Python’s assert statement or a testing framework like unittest for assertions.

python
Copy code
assert "Expected Text" in driver.page_source
9. Running Tests with Python’s unittest Framework
Organize tests in a class and use the unittest framework for better structure.

python
Copy code
import unittest
from selenium import webdriver

class ExampleTest(unittest.TestCase):

    def setUp(self):
        self.driver = webdriver.Chrome()
        self.driver.get("https://example.com")

    def test_title(self):
        self.assertIn("Example Domain", self.driver.title)

    def tearDown(self):
        self.driver.quit()

if __name__ == "__main__":
    unittest.main()
10. Run the Test
bash
Copy code
python test_script.py
11. Using Selenium with pytest
Pytest is another powerful testing framework. Install it and run your tests:

bash
Copy code
pip install pytest
Example test using pytest:

python
Copy code
def test_example():
    driver = webdriver.Chrome()
    driver.get("https://example.com")
    assert "Example Domain" in driver.title
    driver.quit()
Run Tests with pytest:

bash
Copy code
pytest test_script.py
12. Closing the WebDriver
Close the Browser:
python
Copy code
driver.close()  # Closes the current window
driver.quit()   # Closes all windows and ends the session
